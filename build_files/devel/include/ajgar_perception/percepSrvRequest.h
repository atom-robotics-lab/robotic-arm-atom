// Generated by gencpp from file ajgar_perception/percepSrvRequest.msg
// DO NOT EDIT!


#ifndef AJGAR_PERCEPTION_MESSAGE_PERCEPSRVREQUEST_H
#define AJGAR_PERCEPTION_MESSAGE_PERCEPSRVREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ajgar_perception
{
template <class ContainerAllocator>
struct percepSrvRequest_
{
  typedef percepSrvRequest_<ContainerAllocator> Type;

  percepSrvRequest_()
    : flag(0)  {
    }
  percepSrvRequest_(const ContainerAllocator& _alloc)
    : flag(0)  {
  (void)_alloc;
    }



   typedef int32_t _flag_type;
  _flag_type flag;





  typedef boost::shared_ptr< ::ajgar_perception::percepSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ajgar_perception::percepSrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct percepSrvRequest_

typedef ::ajgar_perception::percepSrvRequest_<std::allocator<void> > percepSrvRequest;

typedef boost::shared_ptr< ::ajgar_perception::percepSrvRequest > percepSrvRequestPtr;
typedef boost::shared_ptr< ::ajgar_perception::percepSrvRequest const> percepSrvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ajgar_perception::percepSrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ajgar_perception::percepSrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ajgar_perception::percepSrvRequest_<ContainerAllocator1> & lhs, const ::ajgar_perception::percepSrvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.flag == rhs.flag;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ajgar_perception::percepSrvRequest_<ContainerAllocator1> & lhs, const ::ajgar_perception::percepSrvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ajgar_perception

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ajgar_perception::percepSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ajgar_perception::percepSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ajgar_perception::percepSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ajgar_perception::percepSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ajgar_perception::percepSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ajgar_perception::percepSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ajgar_perception::percepSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aa0dbc5596ec12974ea3a17a045b36e0";
  }

  static const char* value(const ::ajgar_perception::percepSrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaa0dbc5596ec1297ULL;
  static const uint64_t static_value2 = 0x4ea3a17a045b36e0ULL;
};

template<class ContainerAllocator>
struct DataType< ::ajgar_perception::percepSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ajgar_perception/percepSrvRequest";
  }

  static const char* value(const ::ajgar_perception::percepSrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ajgar_perception::percepSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 flag\n"
;
  }

  static const char* value(const ::ajgar_perception::percepSrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ajgar_perception::percepSrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct percepSrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ajgar_perception::percepSrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ajgar_perception::percepSrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AJGAR_PERCEPTION_MESSAGE_PERCEPSRVREQUEST_H
