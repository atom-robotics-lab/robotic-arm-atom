// Generated by gencpp from file ajgar_core/tfValueSrvRequest.msg
// DO NOT EDIT!


#ifndef AJGAR_CORE_MESSAGE_TFVALUESRVREQUEST_H
#define AJGAR_CORE_MESSAGE_TFVALUESRVREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ajgar_core
{
template <class ContainerAllocator>
struct tfValueSrvRequest_
{
  typedef tfValueSrvRequest_<ContainerAllocator> Type;

  tfValueSrvRequest_()
    : tfArray()  {
    }
  tfValueSrvRequest_(const ContainerAllocator& _alloc)
    : tfArray(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _tfArray_type;
  _tfArray_type tfArray;





  typedef boost::shared_ptr< ::ajgar_core::tfValueSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ajgar_core::tfValueSrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct tfValueSrvRequest_

typedef ::ajgar_core::tfValueSrvRequest_<std::allocator<void> > tfValueSrvRequest;

typedef boost::shared_ptr< ::ajgar_core::tfValueSrvRequest > tfValueSrvRequestPtr;
typedef boost::shared_ptr< ::ajgar_core::tfValueSrvRequest const> tfValueSrvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ajgar_core::tfValueSrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ajgar_core::tfValueSrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ajgar_core::tfValueSrvRequest_<ContainerAllocator1> & lhs, const ::ajgar_core::tfValueSrvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.tfArray == rhs.tfArray;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ajgar_core::tfValueSrvRequest_<ContainerAllocator1> & lhs, const ::ajgar_core::tfValueSrvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ajgar_core

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ajgar_core::tfValueSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ajgar_core::tfValueSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ajgar_core::tfValueSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ajgar_core::tfValueSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ajgar_core::tfValueSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ajgar_core::tfValueSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ajgar_core::tfValueSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c8b8c86b312e11339447f3b6046d437b";
  }

  static const char* value(const ::ajgar_core::tfValueSrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc8b8c86b312e1133ULL;
  static const uint64_t static_value2 = 0x9447f3b6046d437bULL;
};

template<class ContainerAllocator>
struct DataType< ::ajgar_core::tfValueSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ajgar_core/tfValueSrvRequest";
  }

  static const char* value(const ::ajgar_core::tfValueSrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ajgar_core::tfValueSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] tfArray \n"
;
  }

  static const char* value(const ::ajgar_core::tfValueSrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ajgar_core::tfValueSrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tfArray);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct tfValueSrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ajgar_core::tfValueSrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ajgar_core::tfValueSrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "tfArray[]" << std::endl;
    for (size_t i = 0; i < v.tfArray.size(); ++i)
    {
      s << indent << "  tfArray[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.tfArray[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AJGAR_CORE_MESSAGE_TFVALUESRVREQUEST_H
