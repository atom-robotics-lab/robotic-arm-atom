// Generated by gencpp from file ajgar_core/tfValueSrvResponse.msg
// DO NOT EDIT!


#ifndef AJGAR_CORE_MESSAGE_TFVALUESRVRESPONSE_H
#define AJGAR_CORE_MESSAGE_TFVALUESRVRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ajgar_core
{
template <class ContainerAllocator>
struct tfValueSrvResponse_
{
  typedef tfValueSrvResponse_<ContainerAllocator> Type;

  tfValueSrvResponse_()
    : reachedGoal(false)  {
    }
  tfValueSrvResponse_(const ContainerAllocator& _alloc)
    : reachedGoal(false)  {
  (void)_alloc;
    }



   typedef uint8_t _reachedGoal_type;
  _reachedGoal_type reachedGoal;





  typedef boost::shared_ptr< ::ajgar_core::tfValueSrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ajgar_core::tfValueSrvResponse_<ContainerAllocator> const> ConstPtr;

}; // struct tfValueSrvResponse_

typedef ::ajgar_core::tfValueSrvResponse_<std::allocator<void> > tfValueSrvResponse;

typedef boost::shared_ptr< ::ajgar_core::tfValueSrvResponse > tfValueSrvResponsePtr;
typedef boost::shared_ptr< ::ajgar_core::tfValueSrvResponse const> tfValueSrvResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ajgar_core::tfValueSrvResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ajgar_core::tfValueSrvResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ajgar_core::tfValueSrvResponse_<ContainerAllocator1> & lhs, const ::ajgar_core::tfValueSrvResponse_<ContainerAllocator2> & rhs)
{
  return lhs.reachedGoal == rhs.reachedGoal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ajgar_core::tfValueSrvResponse_<ContainerAllocator1> & lhs, const ::ajgar_core::tfValueSrvResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ajgar_core

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ajgar_core::tfValueSrvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ajgar_core::tfValueSrvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ajgar_core::tfValueSrvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ajgar_core::tfValueSrvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ajgar_core::tfValueSrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ajgar_core::tfValueSrvResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ajgar_core::tfValueSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "81492924865f72c18a6f4bdd91cb99e9";
  }

  static const char* value(const ::ajgar_core::tfValueSrvResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x81492924865f72c1ULL;
  static const uint64_t static_value2 = 0x8a6f4bdd91cb99e9ULL;
};

template<class ContainerAllocator>
struct DataType< ::ajgar_core::tfValueSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ajgar_core/tfValueSrvResponse";
  }

  static const char* value(const ::ajgar_core::tfValueSrvResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ajgar_core::tfValueSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool reachedGoal\n"
;
  }

  static const char* value(const ::ajgar_core::tfValueSrvResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ajgar_core::tfValueSrvResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.reachedGoal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct tfValueSrvResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ajgar_core::tfValueSrvResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ajgar_core::tfValueSrvResponse_<ContainerAllocator>& v)
  {
    s << indent << "reachedGoal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reachedGoal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AJGAR_CORE_MESSAGE_TFVALUESRVRESPONSE_H
